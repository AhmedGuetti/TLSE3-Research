<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 500">
  <!-- Background -->
  <rect width="800" height="400" fill="#ffffff"/>
  
  <!-- Title -->
  <text x="400" y="30" font-family="Arial" font-size="20" font-weight="bold" text-anchor="middle" fill="#0066cc">Neural Network Architectures for Combinatorial Optimization</text>
  
  <!-- Pointer Network -->
  <rect x="50" y="60" width="220" height="200" rx="10" ry="10" fill="#f0f8ff" stroke="#0066cc" stroke-width="2" stroke-linejoin="round"/>
  <text x="160" y="80" font-family="Arial" font-size="16" font-weight="bold" text-anchor="middle" fill="#0066cc">Pointer Network</text>
  
  <!-- PN Architecture -->
  <circle cx="100" cy="120" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="100" y="123" font-family="Arial" font-size="10" text-anchor="middle">c₁</text>
  
  <circle cx="100" cy="160" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="100" y="163" font-family="Arial" font-size="10" text-anchor="middle">c₂</text>
  
  <circle cx="100" cy="200" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="100" y="203" font-family="Arial" font-size="10" text-anchor="middle">c₃</text>
  
  <circle cx="100" cy="240" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="100" y="243" font-family="Arial" font-size="10" text-anchor="middle">c₄</text>
  
  <!-- Encoder -->
  <rect x="140" y="120" width="70" height="80" rx="5" ry="5" fill="#d6eaf8" stroke="#000000" stroke-width="1"/>
  <text x="175" y="165" font-family="Arial" font-size="12" text-anchor="middle">Encoder</text>
  
  <!-- Decoder -->
  <rect x="140" y="220" width="70" height="20" rx="5" ry="5" fill="#aed6f1" stroke="#000000" stroke-width="1"/>
  <text x="175" y="234" font-family="Arial" font-size="12" text-anchor="middle">Decoder</text>
  
  <!-- Attention arrows -->
  <line x1="100" y1="120" x2="140" y2="140" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="100" y1="160" x2="140" y2="160" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="100" y1="200" x2="140" y2="180" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="100" y1="240" x2="140" y2="230" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  
  <!-- Output links -->
  <path d="M 210,160 C 230,160 230,230 175,230" stroke="#000000" stroke-width="1" fill="none" marker-end="url(#arrowheadsmall)"/>
  
  <!-- Output -->
  <rect x="220" y="220" width="30" height="20" rx="3" ry="3" fill="#1a5276" stroke="#000000" stroke-width="1"/>
  <text x="235" y="234" font-family="Arial" font-size="12" text-anchor="middle" fill="white">π</text>
  <line x1="210" y1="230" x2="220" y2="230" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  
  <!-- PN Box Extension -->
  <rect x="50" y="260" width="220" height="80" rx="0" ry="0" fill="#f0f8ff" stroke="#0066cc" stroke-width="2"/>
  
  <!-- PN Description -->
  <text x="160" y="275" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Uses attention to point to</text>
  <text x="160" y="289" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">elements in the input sequence</text>
  <text x="160" y="303" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Effective for TSP</text>
  <text x="160" y="317" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Generates permutations</text>
  <text x="160" y="331" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• 1.5x speedup, &#60;3% gap from optimal</text>
  
  <!-- Graph Neural Network -->
  <rect x="290" y="60" width="220" height="200" rx="10" ry="10" fill="#f0f8ff" stroke="#0066cc" stroke-width="2" stroke-linejoin="round"/>
  <text x="400" y="80" font-family="Arial" font-size="16" font-weight="bold" text-anchor="middle" fill="#0066cc">Graph Neural Network</text>
  
  <!-- GNN Architecture -->
  <!-- Graph Nodes -->
  <circle cx="340" cy="150" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="340" y="153" font-family="Arial" font-size="10" text-anchor="middle">v₁</text>
  
  <circle cx="390" cy="110" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="390" y="113" font-family="Arial" font-size="10" text-anchor="middle">v₂</text>
  
  <circle cx="460" cy="130" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="460" y="133" font-family="Arial" font-size="10" text-anchor="middle">v₃</text>
  
  <circle cx="430" cy="190" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="430" y="193" font-family="Arial" font-size="10" text-anchor="middle">v₄</text>
  
  <circle cx="370" cy="210" r="15" fill="#bbe1fa" stroke="#000000" stroke-width="1"/>
  <text x="370" y="213" font-family="Arial" font-size="10" text-anchor="middle">v₅</text>
  
  <!-- Graph Edges -->
  <line x1="340" y1="150" x2="390" y2="110" stroke="#000000" stroke-width="1"/>
  <line x1="390" y1="110" x2="460" y2="130" stroke="#000000" stroke-width="1"/>
  <line x1="460" y1="130" x2="430" y2="190" stroke="#000000" stroke-width="1"/>
  <line x1="430" y1="190" x2="370" y2="210" stroke="#000000" stroke-width="1"/>
  <line x1="370" y1="210" x2="340" y2="150" stroke="#000000" stroke-width="1"/>
  <line x1="390" y1="110" x2="370" y2="210" stroke="#000000" stroke-width="1" stroke-dasharray="3,3"/>
  <line x1="340" y1="150" x2="430" y2="190" stroke="#000000" stroke-width="1" stroke-dasharray="3,3"/>
  
  <!-- GNN Box Extension -->
  <rect x="290" y="260" width="220" height="100" rx="0" ry="0" fill="#f0f8ff" stroke="#0066cc" stroke-width="2"/>
  
  <!-- GNN Description -->
  <text x="400" y="275" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Message passing between nodes</text>
  <text x="400" y="290" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Captures graph structure</text>
  <text x="400" y="305" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Works across multiple domains</text>
  <text x="400" y="320" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Used in Graph-Q-SAT</text>
  <text x="400" y="335" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• 2-3x fewer steps for SAT</text>
  <text x="400" y="350" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Moderate generalization to new problems</text>
  
  <!-- Hybrid Neural-Algorithmic Architecture -->
  <rect x="530" y="60" width="220" height="200" rx="10" ry="10" fill="#f0f8ff" stroke="#0066cc" stroke-width="2" stroke-linejoin="round"/>
  <text x="640" y="80" font-family="Arial" font-size="16" font-weight="bold" text-anchor="middle" fill="#0066cc">Hybrid Neural-Algorithmic</text>
  
  <!-- Hybrid Architecture -->
  <!-- Problem instance -->
  <rect x="550" y="110" width="80" height="30" rx="5" ry="5" fill="#d6eaf8" stroke="#000000" stroke-width="1"/>
  <text x="590" y="130" font-family="Arial" font-size="12" text-anchor="middle">Problem</text>
  
  <!-- Neural component -->
  <rect x="550" y="170" width="80" height="30" rx="5" ry="5" fill="#aed6f1" stroke="#000000" stroke-width="1"/>
  <text x="590" y="185" font-family="Arial" font-size="10" text-anchor="middle">Neural Network</text>
  <text x="590" y="197" font-family="Arial" font-size="10" text-anchor="middle">(e.g., TreeGate)</text>
  
  <!-- Traditional algorithm -->
  <rect x="650" y="170" width="80" height="30" rx="5" ry="5" fill="#d5f5e3" stroke="#000000" stroke-width="1"/>
  <text x="690" y="185" font-family="Arial" font-size="10" text-anchor="middle">Traditional Algo</text>
  <text x="690" y="197" font-family="Arial" font-size="10" text-anchor="middle">(e.g., B&amp;B)</text>
  
  <!-- Solution -->
  <rect x="600" y="230" width="80" height="30" rx="5" ry="5" fill="#1a5276" stroke="#000000" stroke-width="1"/>
  <text x="640" y="250" font-family="Arial" font-size="12" text-anchor="middle" fill="white">Solution</text>
  
  <!-- Arrows -->
  <line x1="590" y1="140" x2="590" y2="170" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="590" y1="140" x2="690" y2="170" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="590" y1="200" x2="640" y2="230" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="690" y1="200" x2="640" y2="230" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  
  <!-- Bidirectional arrow -->
  <line x1="630" y1="185" x2="650" y2="185" stroke="#000000" stroke-width="1" marker-end="url(#arrowheadsmall)"/>
  <line x1="650" y1="185" x2="630" y2="185" stroke="#000000" stroke-width="1" marker-start="url(#arrowheadsmall)"/>
  
  <!-- Hybrid Box Extension -->
  <rect x="530" y="260" width="220" height="85" rx="0" ry="0" fill="#f0f8ff" stroke="#0066cc" stroke-width="2"/>
  
  <!-- Hybrid Description -->
  <text x="640" y="275" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Combines ML with traditional</text>
  <text x="640" y="290" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">  algorithmic frameworks</text>
  <text x="640" y="305" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• Best performance &amp; guarantees</text>
  <text x="640" y="320" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• 3x speedup for ExtraTrees</text>
  <text x="640" y="335" font-family="Arial" font-size="10" text-anchor="middle" fill="#444444">• 27% fewer nodes with TreeGate</text>
  
  <!-- No Summary Section -->
  
  <!-- Arrow definitions -->
  <defs>
    <marker id="arrowheadsmall" markerWidth="5" markerHeight="3.5" refX="5" refY="1.75" orient="auto">
      <polygon points="0 0, 5 1.75, 0 3.5" fill="#000000"/>
    </marker>
  </defs>
</svg>